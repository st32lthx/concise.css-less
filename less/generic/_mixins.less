//
// Passing in a single value will create font-sizing in 
// pixels, rems as well as a proper line-height.
// 
//    `.font-size(24px, false);`
// 
// 
.font-size(@font-size, @line-height: true) {
    @px-value: (@font-size);
	@rem-value: (@font-size / @base-font-size) * 1rem;
	@line-height-value: ceil((@font-size / @base-line-height) * (@base-line-height / @font-size));
	
    font-size: ~"@{px-value}px";
	font-size: @rem-value;
	
	.line-height(@boolean) when (@boolean = true) {
		line-height: unit(@line-height-value);
	}
	
	.line-height(@line-height);
}


// 
// Proper vendor prefixes are created just by 
// passing a property value and size value.
// 
//    `.vendor(border-radius, 4px);`
// 
// 
.vendor(@property, @value) {
	-webkit-@{property}: @value;
	-moz-@{property}: @value;
	-o-@{property}: @value;
	-ms-@{property}: @value;
	@{property}: @value;
}


//
// By passing in one of the pre-defined media queries that 
// are packaged with Concise by default, you can easily 
// create styles that are built from the ground-up to be 
// mobile friendly.
// 
//    `@media @medium { styles here }`
// 
// 
@extra-small:  ~"only screen and (max-width:"@extra-small-start")";
@small: 	   ~"only screen and (min-width:"@small-start")";
@medium: 	   ~"only screen and (min-width:"@medium-start")";
@large: 	   ~"only screen and (min-width:"@large-start")";
@extra-large:  ~"only screen and (min-width:"@extra-large-start")";
@high-density: ~"only screen and (-webkit-min-device-pixel-ratio: 1.5)",
               ~"only screen and (min--moz-device-pixel-ratio: 1.5)",
               ~"only screen and (-o-min-device-pixel-ratio: 3/2)",
               ~"only screen and (min-device-pixel-ratio: 1.5)";


//
// Create variable-number grid columns given the value
// for variable `@column-number` 
// 
.grid-setup(@number: @column-number) {
	// Assign percentage-based widths for columns
	@for @i from 1 through @number {
		.#{@column-prefix + @i} { width: 100% / @number * @i; }
	}
	
	@for @i from 1 through @number { 
		// Style all but the last column
		@if @i != @column-number {
			.gutters .#{@column-prefix + @i} { width: 100% / @number * @i - @gutters; }
		} @else {
		// Ensure the last column has a width of 100%
			.gutters .#{@column-prefix + @i} { width: 100% }
		}
	}
}


//
// Create proper `.push-` classes given the value
// for variable `@column-number`
// 
.push-setup(@number: @column-number) {
	@for @i from 1 to @number {
		.push-#{@i} { left: 100% / @number * @i; }
	}
	
	@for @i from 1 to @number { 
		.gutters .push-#{@i} { left: 100% / @number * @i - @gutters; }
	}
}


//
// Create proper `.pull-` classes given the value
// for variable `@column-number`
// 
.pull-setup(@number: @column-number) {
	@for @i from 1 to @number {
		.pull-#{@i} { right: 100% / @number * @i; }
	}
	
	@for @i from 1 to @number { 
		.gutters .pull-#{@i} { right: 100% / @number * @i - @gutters; }
	}
}